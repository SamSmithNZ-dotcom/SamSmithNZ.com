@model System.Web.HtmlString
@{
    ViewBag.Title = "";
    Layout = "~/Views/Shared/_LayoutWorldCup.cshtml";
    //Layout = null;
    System.Web.HtmlString newString = new System.Web.HtmlString(Model.ToString().Replace("],[", "],<br>["));
}

<!DOCTYPE html>
<head>
    <meta charset="utf-8">
    <link href="@Url.Content("~/content/css/bootstrap.css")" rel="stylesheet">
    <style>
        body {
            font: 9px sans-serif;
            color: #121401;
        }

        .axis path,
        .axis line {
            fill: none;
            stroke: #121401;
            stroke-width: 2px;
            shape-rendering: crispEdges;
        }
    </style>
    <script src="http://d3js.org/d3.v3.min.js" charset="utf-8"></script>
    @Scripts.Render("~/bundles/jquery")
    <script src="@Url.Content("~/Scripts/bootstrap.js")"></script>
</head>
<body>
    <h3>Chance of winning the 2014 World Cup</h3>
    @*<div>@newString</div>*@
    <pre id="csvdata" style="display: none;">
quarter,Algeria,Australia,Bosnia-Herzegovina,Cameroon,Costa Rica,Croatia,Ecuador,Ghana,Greece,Honduras,Iran,Ivory Coast,Japan,Mexico,Nigeria,Russia,South Korea,Switzerland,USA
11-Jun,0.07,0.10,0.63,0.15,0.05,0.66,0.58,0.48,0.37,0.04,0.06,0.71,0.67,0.65,0.38,1.06,0.27,0.93,0.47
12-Jun,0.07,0.10,0.63,0.15,0.05,0.66,0.57,0.48,0.38,0.05,0.06,0.73,0.67,0.63,0.39,1.05,0.27,0.95,0.47
13-Jun,0.07,0.10,0.66,0.13,0.05,0.59,0.57,0.45,0.38,0.05,0.06,0.72,0.70,0.72,0.37,1.02,0.25,0.93,0.45
14-Jun,0.07,0.06,0.65,0.09,0.05,0.66,0.56,0.44,0.29,0.05,0.06,0.71,0.67,0.77,0.38,0.98,0.24,0.94,0.45
15-Jun,0.08,0.05,0.64,0.09,0.21,0.57,0.55,0.45,0.20,0.05,0.06,1.04,0.36,0.79,0.38,0.96,0.26,0.94,0.46
16-Jun,0.07,0.04,0.65,0.09,0.20,0.57,0.29,0.44,0.16,0.03,0.06,1.17,0.36,0.73,0.36,0.91,0.25,1.11,0.45
17-Jun,0.07,0.04,0.70,0.09,0.21,0.58,0.30,0.28,0.15,0.03,0.07,1.17,0.37,0.78,0.27,0.94,0.25,1.13,0.60
18-Jun,0.08,0.04,0.69,0.09,0.21,0.58,0.27,0.24,0.15,0.03,0.06,1.12,0.34,1.03,0.22,0.75,0.24,1.10,0.56
19-Jun,0.06,0.00,0.68,0.00,0.21,0.93,0.24,0.24,0.15,0.03,0.06,0.89,0.32,1.09,0.20,0.65,0.24,1.03,0.54
20-Jun,0.08,0.00,0.70,0.00,0.23,1.01,0.22,0.23,0.13,0.03,0.06,0.85,0.27,1.15,0.20,0.64,0.24,1.01,0.55
21-Jun,0.08,0.00,0.72,0.00,1.41,1.02,0.33,0.21,0.15,0.02,0.06,1.04,0.25,1.35,0.19,0.60,0.23,0.65,0.52
22-Jun,0.08,0.00,0.67,0.00,1.50,1.00,0.31,0.38,0.14,0.02,0.06,1.02,0.24,1.42,0.43,0.55,0.24,0.58,0.53
23-Jun,0.27,0.00,0.00,0.00,1.57,1.04,0.30,0.36,0.15,0.02,0.06,1.05,0.24,1.44,0.44,0.38,0.07,0.64,1.04

    </pre>
    <script>
        var margin = { top: 20, right: 55, bottom: 30, left: 40 },
            width = 1000 - margin.left - margin.right,
            height = 500 - margin.top - margin.bottom;

        var x = d3.scale.ordinal()
            .rangeRoundBands([0, width], .1);

        var y = d3.scale.linear()
            .rangeRound([height, 0]);

        var xAxis = d3.svg.axis()
            .scale(x)
            .orient("bottom");

        var yAxis = d3.svg.axis()
            .scale(y)
            .orient("left");

        var line = d3.svg.line()
            .interpolate("cardinal")
            .x(function (d) { return x(d.label) + x.rangeBand() / 2; })
            .y(function (d) { return y(d.value); });

        //var color = d3.scale.ordinal()
        //    .range(["#001c9c", "#101b4d", "#475003", "#9c8305", "#d3c47c"]);
        var color = d3.scale.category20();
        //var color = GetColor(d.label);

        function ColorLuminance(hex, lum) {

            //if we aren't changing the color...
            if (lum == 0) {
                return hex;
            }
            else {
                // validate hex string
                hex = String(hex).replace(/[^0-9a-f]/gi, '');
                if (hex.length < 6) {
                    hex = hex[0] + hex[0] + hex[1] + hex[1] + hex[2] + hex[2];
                }
                lum = lum || 0;

                // convert to decimal and change luminosity
                var rgb = "#", c, i;
                for (i = 0; i < 3; i++) {
                    c = parseInt(hex.substr(i * 2, 2), 16);
                    c = Math.round(Math.min(Math.max(0, c + (c * lum)), 255)).toString(16);
                    rgb += ("00" + c).substr(c.length);
                }
                //alert(rgb);
                return rgb;
            }
        }

        function GetColor(teamName, lum, origin) {
            //console.log(teamName + ":" + origin);
            switch (teamName) {
                case "Algeria":
                    return ColorLuminance("#2EFE2E", lum);
                case "Argentina":
                    if (lum == 0) {                      
                        return ColorLuminance("#58D3F7", lum);
                    }
                    else {
                        return ColorLuminance("#FFFFFF", 0);
                    }
                    //return ColorLuminance("#58D3F7", lum);
                case "Australia":
                    return ColorLuminance("#F7FE2E", lum);
                case "Belgium":
                    return ColorLuminance("#8A0808", lum);
                case "Bosnia-Herzegovina":
                    return ColorLuminance("#0404B4", lum);
                case "Brazil":
                    if (lum == 0) {                      
                        return ColorLuminance("#FEFE00", lum);
                    }
                    else {
                        return ColorLuminance("#0000FF", 0);
                    }
                    //return ColorLuminance("#FEFE00", lum);
                case "Cameroon":
                    return ColorLuminance("#04B404", lum);
                case "Chile":
                    return ColorLuminance("#FF0000", lum);
                case "Colombia":
                    return ColorLuminance("#FFFF00", lum);
                case "Costa Rica":
                    return ColorLuminance("#FF0000", lum);
                case "Croatia":
                    return ColorLuminance("#F78181", lum);
                case "Ecuador":
                    return ColorLuminance("#FFFF00", lum);
                case "England":
                    return ColorLuminance("#FF0000", lum);
                case "France":                   
                    if (lum == 0) {                      
                        return ColorLuminance("#08088A", lum);
                    }
                    else {
                        return ColorLuminance("#FFFFFF", 0);
                    }   
                    //return ColorLuminance("#0000FF", lum);                 
                case "Germany":                   
                    if (lum == 0) {                      
                        return ColorLuminance("#B40404", lum);
                    }
                    else {
                        return ColorLuminance("#FFFFFF", 0);
                    }                    
                    //return ColorLuminance("#DF0101", lum);
                case "Ghana":
                    return ColorLuminance("#088A08", lum);
                case "Greece":
                    return ColorLuminance("#013ADF", lum);
                case "Honduras":
                    return ColorLuminance("#0040FF", lum);
                case "Iran":
                    return ColorLuminance("#088A08", lum);
                case "Italy":
                    if (lum == 0) {                      
                        return ColorLuminance("#0000FF", lum);
                    }
                    else {
                        return ColorLuminance("#FFFFFF", 0);
                    }   
                    //return ColorLuminance("#0404B4", lum);
                case "Ivory Coast":
                    return ColorLuminance("#FF8000", lum);
                case "Japan":
                    return ColorLuminance("#FF0000", lum);
                case "Mexico":
                    return ColorLuminance("#FA5858", lum);
                case "Netherlands":
                    if (lum == 0) {                      
                        return ColorLuminance("#FF8000", lum);
                    }
                    else {
                        return ColorLuminance("#08088A", 0);
                    }
                    //return ColorLuminance("#FF8000", lum);
                case "Nigeria":
                    return ColorLuminance("#04B404", lum);
                case "Portugal":
                    return ColorLuminance("#04B404", lum);
                case "Russia":
                    return ColorLuminance("FF0000", lum);
                case "South Korea":
                    return ColorLuminance("#0101DF", lum);
                case "Spain":
                    if (lum == 0) {                      
                        return ColorLuminance("#FFFF00", lum);
                    }
                    else {
                        return ColorLuminance("#FE2E2E", 0);
                    }
                    //return ColorLuminance("#FE2E2E", lum);                    
                case "Switzerland":
                    return ColorLuminance("FF0000", lum);
                case "Uruguay":
                    return ColorLuminance("#0404B4", lum);
                case "USA":
                    return ColorLuminance("FF0000", lum);
                default:
                    return d3.scale.category20();
            }
        }

        var svg = d3.select("body").append("svg")
            .attr("width", width + margin.left + margin.right)
            .attr("height", height + margin.top + margin.bottom)
          .append("g")
            .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

        //var myarr = '';
        var rawCSV = d3.select("#csvdata").text();
        //alert(rawCSV);
        //d3.select("#rawCSV").text(JSON.stringify(rawCSV));

        d3.csv("/Content/D3Content/@Model", function (error, data) {
        //d3.csv.parse(rawCSV, function (error, data) {
            var labelVar = 'quarter';
            var varNames = d3.keys(data[0]).filter(function (key) { return key !== labelVar; });
            color.domain(varNames);

            var seriesData = varNames.map(function (name) {
                return {
                    name: name,
                    values: data.map(function (d) {
                        return { name: name, label: d[labelVar], value: +d[name] };
                    })
                };
            });

            x.domain(data.map(function (d) { return d.quarter; }));
            y.domain([
              d3.min(seriesData, function (c) {
                  return d3.min(c.values, function (d) { return d.value; });
              }),
              d3.max(seriesData, function (c) {
                  return d3.max(c.values, function (d) { return d.value; });
              })
            ]);

            svg.append("g")
                .attr("class", "x axis")
                .attr("transform", "translate(0," + height + ")")
                .call(xAxis);

            svg.append("g")
                .attr("class", "y axis")
                .call(yAxis)
              .append("text")
                .attr("transform", "rotate(-90)")
                .attr("y", 6)
                .attr("dy", ".71em")
                .style("text-anchor", "end")
                .text("% chance of Winning");

            var series = svg.selectAll(".series")
                .data(seriesData)
              .enter().append("g")
                .attr("class", "series");

            series.append("path")
              .attr("class", "line")
              //.attr("id", function (d) { return d.name.toLowerCase(); })
              .attr("d", function (d) { return line(d.values); })
              .style("stroke", function (d) { return GetColor(d.name, 0, "path"); })
              .style("stroke-width", "4px")
              .style("fill", "none")

            series.selectAll(".point")
              .data(function (d) { return d.values; })
              .enter().append("circle")
               .attr("class", "point")
               .attr("cx", function (d) { return x(d.label) + x.rangeBand() / 2; })
               .attr("cy", function (d) { return y(d.value); })
               .attr("r", "5px")
               .style("fill", function (d) { return GetColor(d.name, 0, "point"); })
               .style("stroke", function (d) { return GetColor(d.name, -0.2, "point"); })
               .style("stroke-width", "2px")
               .on("mouseover", function (d) { showPopover.call(this, d); })
               .on("mouseout", function (d) { removePopovers(); })

            var legend = svg.selectAll(".legend")
                .data(varNames.slice())
                .enter().append("g")
                .attr("class", "legend")
                .attr("transform", function (d, i) { return "translate(55," + i * 15 + ")"; });

            function ToggleSeries(teamName) {
                alert(teamName);
                var oldOpacity = d3.select("#" + teamName).style("opacity");
                alert("old:" + oldOpacity);
                var newOpacity = oldOpacity ? 0 : 1;
                alert("new:" + newOpacity);
                d3.select("#" + teamName).style("opacity", newOpacity);
            }

            legend.append("rect")
                .attr("x", width - 10)
                .attr("width", 10)
                .attr("height", 10)
                .style("fill", function (d) { return GetColor(d, 0, "legend"); })
                .style("stroke", function (d) { return GetColor(d, -0.2, "legend"); })
                //.on("click", function (d) { ToggleSeries(d); })

            legend.append("text")
                .attr("x", width - 12)
                .attr("y", 6)
                .attr("dy", ".35em")
                .style("text-anchor", "end")
                .text(function (d) { return d; });


            function removePopovers() {
                $('.popover').each(function () {
                    $(this).remove();
                });
            }

            function showPopover(d) {
                console.log(d);
                //console.log((d.value == 0 ? 0 : (d.value ? d.value : d.y1 - d.y0)));
                $(this).popover({
                    title: d.name,
                    placement: 'auto top',
                    container: 'body',
                    trigger: 'manual',
                    html: true,
                    content: function () {
                        return "Date: " + d.label +
                               "<br/> " + d3.format(",")(d.value == 0 ? 0 : (d.value ? d.value : d.y1 - d.y0)) + "%";
                    }
                });
                $(this).popover('show')
            }

        });
    </script>
</body>
