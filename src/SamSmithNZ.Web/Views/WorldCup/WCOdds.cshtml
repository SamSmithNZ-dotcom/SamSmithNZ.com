@model SamSmithNZ2015.Models.IntFootball.OddsViewModel
@{
    ViewBag.Title = "World Cup Odds";
    Layout = null;
    System.Web.HtmlString newString = new System.Web.HtmlString(Model.GraphData.ToString().Replace("],[", "],<br>["));
    string showTeamsActiveText = "Show";
    if (Model.ShowActive == true)
    {
        showTeamsActiveText = "Hide";
    }
    string showTeamsEliminatedText = "Show";
    if (Model.ShowEliminated == true)
    {
        showTeamsEliminatedText = "Hide";
    }
}

<!DOCTYPE html>
<head>
    <meta charset="utf-8">
    <link href="@Url.Content("~/content/bootstrap.css")" rel="stylesheet">
    <style>
        body {
            font: 9px sans-serif;
            color: #121401;
        }

        .axis path,
        .axis line {
            fill: none;
            stroke: #121401;
            stroke-width: 2px;
            shape-rendering: crispEdges;
        }
    </style>
    <script src="http://d3js.org/d3.v3.min.js"></script>
    @Scripts.Render("~/bundles/jquery")
    <script src="@Url.Content("~/Scripts/bootstrap.js")"></script>
</head>
<body>
    <h3>Odds to win 2014 World Cup</h3>
    <!--[if lt IE 10]>
        <h4 style="color:red;">It has been detected that you are using IE9 or older. This chart uses features that older versions of IE cannot render. Please try again in another browser or upgrade to IE10.</h4>
    <![endif]-->
    <div style="display: none;">@Model.GraphData.ToString()</div>
    <div style="margin-left: 40px; font-size: 12px;">
        <a href="@Url.Action("WCOdds", "IntFootball", new { maxRange = "100", showActive = Model.ShowActive, showEliminated = Model.ShowEliminated })">Show all teams</a> | 
        <a href="@Url.Action("WCOdds", "IntFootball", new { maxRange = "6", showActive = Model.ShowActive, showEliminated = Model.ShowEliminated })">Show teams with max 6%</a> | 
        <a href="@Url.Action("WCOdds", "IntFootball", new { maxRange = "2", showActive = Model.ShowActive, showEliminated = Model.ShowEliminated })">Show teams with max 2%</a> | 
        <a href="@Url.Action("WCOdds", "IntFootball", new { maxRange = "1", showActive = Model.ShowActive, showEliminated = Model.ShowEliminated })">Show teams with max 1%</a> |
        <a href="@Url.Action("WCOdds", "IntFootball", new { maxRange = Model.MaxRange, showActive = !Model.ShowActive, showEliminated = Model.ShowEliminated })">@showTeamsActiveText teams still alive</a> |
        <a href="@Url.Action("WCOdds", "IntFootball", new { maxRange = Model.MaxRange, showActive = Model.ShowActive, showEliminated = !Model.ShowEliminated })">@showTeamsEliminatedText teams eliminated</a>
    </div>
    <script>
        var margin = { top: 20, right: 55, bottom: 30, left: 40 },
            width = 1000 - margin.left - margin.right,
            height = 500 - margin.top - margin.bottom;

        var x = d3.scale.ordinal()
            .rangeRoundBands([0, width], .1);

        var y = d3.scale.linear()
            .rangeRound([height, 0]);

        var xAxis = d3.svg.axis()
            .scale(x)
            .orient("bottom");

        var yAxis = d3.svg.axis()
            .scale(y)
            .orient("left");

        var line = d3.svg.line()
            .interpolate("cardinal")
            .x(function (d) { return x(d.label) + x.rangeBand() / 2; })
            .y(function (d) { return y(d.value); });

        //var color = d3.scale.ordinal()
        //    .range(["#001c9c", "#101b4d", "#475003", "#9c8305", "#d3c47c"]);
        var color = d3.scale.category20();
        //var color = GetColor(d.label);

        function ColorLuminance(hex, lum) {

            //if we aren't changing the color...
            if (lum == 0) {
                return hex;
            }
            else {
                // validate hex string
                hex = String(hex).replace(/[^0-9a-f]/gi, '');
                if (hex.length < 6) {
                    hex = hex[0] + hex[0] + hex[1] + hex[1] + hex[2] + hex[2];
                }
                lum = lum || 0;

                // convert to decimal and change luminosity
                var rgb = "#", c, i;
                for (i = 0; i < 3; i++) {
                    c = parseInt(hex.substr(i * 2, 2), 16);
                    c = Math.round(Math.min(Math.max(0, c + (c * lum)), 255)).toString(16);
                    rgb += ("00" + c).substr(c.length);
                }
                //alert(rgb);
                return rgb;
            }
        }

        function GetColor(teamName, lum, origin) {
            //console.log(teamName + ":" + origin);
            switch (teamName) {
                case "Algeria":
                    return ColorLuminance("#2EFE2E", lum);
                case "Argentina":
                    if (lum == 0) {
                        return ColorLuminance("#58D3F7", lum);
                    }
                    else {
                        return ColorLuminance("#FFFFFF", 0);
                    }
                    //return ColorLuminance("#58D3F7", lum);
                case "Australia":
                    return ColorLuminance("#F7FE2E", lum);
                case "Belgium":
                    return ColorLuminance("#8A0808", lum);
                case "Bosnia-Herzegovina":
                    return ColorLuminance("#0404B4", lum);
                case "Brazil":
                    if (lum == 0) {
                        return ColorLuminance("#FEFE00", lum);
                    }
                    else {
                        return ColorLuminance("#0000FF", 0);
                    }
                    //return ColorLuminance("#FEFE00", lum);
                case "Cameroon":
                    return ColorLuminance("#04B404", lum);
                case "Chile":
                    return ColorLuminance("#FF0000", lum);
                case "Colombia":
                    return ColorLuminance("#FFFF00", lum);
                case "Costa Rica":
                    return ColorLuminance("#FF0000", lum);
                case "Croatia":
                    return ColorLuminance("#F78181", lum);
                case "Ecuador":
                    return ColorLuminance("#FFFF00", lum);
                case "England":
                    return ColorLuminance("#FF0000", lum);
                case "France":
                    if (lum == 0) {
                        return ColorLuminance("#08088A", lum);
                    }
                    else {
                        return ColorLuminance("#FFFFFF", 0);
                    }
                    //return ColorLuminance("#0000FF", lum);                 
                case "Germany":
                    if (lum == 0) {
                        return ColorLuminance("#B40404", lum);
                    }
                    else {
                        return ColorLuminance("#FFFFFF", 0);
                    }
                    //return ColorLuminance("#DF0101", lum);
                case "Ghana":
                    return ColorLuminance("#088A08", lum);
                case "Greece":
                    return ColorLuminance("#013ADF", lum);
                case "Honduras":
                    return ColorLuminance("#0040FF", lum);
                case "Iran":
                    return ColorLuminance("#088A08", lum);
                case "Italy":
                    if (lum == 0) {
                        return ColorLuminance("#0000FF", lum);
                    }
                    else {
                        return ColorLuminance("#FFFFFF", 0);
                    }
                    //return ColorLuminance("#0404B4", lum);
                case "Ivory Coast":
                    return ColorLuminance("#FF8000", lum);
                case "Japan":
                    return ColorLuminance("#FF0000", lum);
                case "Mexico":
                    return ColorLuminance("#FA5858", lum);
                case "Netherlands":
                    if (lum == 0) {
                        return ColorLuminance("#FF8000", lum);
                    }
                    else {
                        return ColorLuminance("#08088A", 0);
                    }
                    //return ColorLuminance("#FF8000", lum);
                case "Nigeria":
                    return ColorLuminance("#04B404", lum);
                case "Portugal":
                    return ColorLuminance("#04B404", lum);
                case "Russia":
                    return ColorLuminance("FF0000", lum);
                case "South Korea":
                    return ColorLuminance("#0101DF", lum);
                case "Spain":
                    if (lum == 0) {
                        return ColorLuminance("#FFFF00", lum);
                    }
                    else {
                        return ColorLuminance("#FE2E2E", 0);
                    }
                    //return ColorLuminance("#FE2E2E", lum);                    
                case "Switzerland":
                    return ColorLuminance("FF0000", lum);
                case "Uruguay":
                    return ColorLuminance("#0404B4", lum);
                case "USA":
                    return ColorLuminance("FF0000", lum);
                default:
                    return d3.scale.category20();
            }
        }

        var svg = d3.select("body").append("svg")
            .attr("width", width + margin.left + margin.right)
            .attr("height", height + margin.top + margin.bottom)
          .append("g")
            .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

        var csvFile = "/Content/D3Content/@Model.GraphData";
        var maxRange = "@Model.MaxRange";
        //var csvFile = "/Content/D3Content/Data100.csv";
        //if (maxRange == "6")
        //{
        //    csvFile = "/Content/D3Content/Data006.csv";
        //}
        //else if (maxRange == "2")
        //{
        //    csvFile = "/Content/D3Content/Data002.csv";
        //}

        d3.csv(csvFile, function (error, data) {
            //d3.csv.parse(myarr, function (error, data) {
            var labelVar = 'quarter';
            var varNames = d3.keys(data[0]).filter(function (key) { return key !== labelVar; });
            color.domain(varNames);

            var seriesData = varNames.map(function (name) {
                return {
                    name: name,
                    values: data.map(function (d) {
                        return { name: name, label: d[labelVar], value: +d[name] };
                    })
                };
            });

            x.domain(data.map(function (d) { return d.quarter; }));
            y.domain([
              d3.min(seriesData, function (c) {
                  return d3.min(c.values, function (d) { return d.value; });
              }),
              d3.max(seriesData, function (c) {
                  return d3.max(c.values, function (d) { return d.value; });
              })
            ]);

            svg.append("g")
                .attr("class", "x axis")
                .attr("transform", "translate(0," + height + ")")
                .call(xAxis);

            svg.append("g")
                .attr("class", "y axis")
                .call(yAxis)
              .append("text")
                .attr("transform", "rotate(-90)")
                .attr("y", 6)
                .attr("dy", ".71em")
                .style("text-anchor", "end")
                .text("% chance of Winning");

            var series = svg.selectAll(".series")
                .data(seriesData)
              .enter().append("g")
                .attr("class", "series");

            series.append("path")
              .attr("class", "line")
              .attr("d", function (d) { return line(d.values); })
              .style("stroke", function (d) { return GetColor(d.name, 0, "path"); })
              .style("stroke-width", "4px")
              .style("fill", "none")

            series.selectAll(".point")
              .data(function (d) { return d.values; })
              .enter().append("circle")
               .attr("class", "point")
               .attr("cx", function (d) { return x(d.label) + x.rangeBand() / 2; })
               .attr("cy", function (d) { return y(d.value); })
               .attr("r", "5px")
               .style("fill", function (d) { return GetColor(d.name, 0, "point"); })
               .style("stroke", function (d) { return GetColor(d.name, -0.2, "point"); })
               .style("stroke-width", "2px")
               .on("mouseover", function (d) { showPopover.call(this, d); })
               .on("mouseout", function (d) { removePopovers(); })

            var legend = svg.selectAll(".legend")
                .data(varNames.slice())
                .enter().append("g")
                .attr("class", "legend")
                .attr("transform", function (d, i) { return "translate(55," + i * 15 + ")"; });

            legend.append("rect")
                .attr("x", width - 10)
                .attr("width", 10)
                .attr("height", 10)
                .style("fill", function (d) { return GetColor(d, 0, "legend"); })
                .style("stroke", function (d) { return GetColor(d, -0.2, "legend"); })

            legend.append("text")
                .attr("x", width - 12)
                .attr("y", 6)
                .attr("dy", ".35em")
                .style("text-anchor", "end")
                .text(function (d) { return d; });

            function removePopovers() {
                $('.popover').each(function () {
                    $(this).remove();
                });
            }

            function showPopover(d) {
                console.log(d);
                //console.log((d.value == 0 ? 0 : (d.value ? d.value : d.y1 - d.y0)));
                $(this).popover({
                    title: d.name,
                    placement: 'auto top',
                    container: 'body',
                    trigger: 'manual',
                    html: true,
                    content: function () {
                        return "Date: " + d.label +
                               "<br/> " + d3.format(",")(d.value == 0 ? 0 : (d.value ? d.value : d.y1 - d.y0)) + "%";
                    }
                });
                $(this).popover('show')
            }

        });
    </script>
</body>

@{
    string savedStatus = "";
    if (DateTime.Now.TimeOfDay.Hours < 10)
    {
        savedStatus = " : Results saved";
    }
    else
    {
        savedStatus = "";
    }

}
@if (Model.GameList.Count == 0)
{
    <span>No Data found</span>
}
else
{
    <br />
    <table class="tableborders">
        <tr>
            <td colspan="6">
                <h3>Odds Analysis (as of @Model.GameList[0].Date.ToString("dd-MMM-yyyy")@savedStatus)</h3>
            </td>
        </tr>
        <tr style="height: 30px;">
            <th class="headerborders" style="width: 185px;">Team</th>
            <th class="headerborders" style="width: 150px; text-align: center;"><b>Daily Average Odds<br />
                (Difference since 11-Jun)</b></th>
            <th class="headerborders" style="width: 75px; text-align: center;">Daily Min</th>
            <th class="headerborders" style="width: 75px; text-align: center;">Daily Max</th>
            <th class="headerborders" style="width: 75px; text-align: center;">Daily Max-Daily Min</th>
            <th class="headerborders" style="width: 75px; text-align: center;">Daily Sample Size</th>
        </tr>
        @for (int i = 1; i <= Model.GameList.Count; i++)
        {
            SamSmithNZ2015.Core.IntFootball.ImportGameOdds item = Model.GameList[i - 1];
            double difference = item.OddsMin - item.OddsMax;
            <tr>
                <td class="cellborders"><b>@i.ToString()<span>. </span>@item.TeamName</b></td>
                @if (item.OddsDifference > 0)
                {
                    <td class="cellborders"><b>@item.OddsProbability.ToString("0.00%") (<span style="color: darkgreen">@item.OddsDifference.ToString("+0.00%")</span>)</b></td>
                }
                else if (item.OddsDifference < 0)
                {
                    <td class="cellborders"><b>@item.OddsProbability.ToString("0.00%") (<span style="color: red">@item.OddsDifference.ToString("0.00%")</span>)</b></td>
                }
                else
                {
                    <td class="cellborders"><b>@item.OddsProbability.ToString("0.00%") </b></td>
                }
                <td class="cellborders">@item.OddsMax.ToString("0.00%")</td>
                <td class="cellborders">@item.OddsMin.ToString("0.00%")</td>
                <td class="cellborders">@difference.ToString("0.00%")</td>
                <td class="cellborders">@item.OddsSampleSize.ToString("0")</td>
            </tr>
        }
    </table>
}
<br />
